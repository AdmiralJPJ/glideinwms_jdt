#!/bin/env python

import popen2
import os
import copy
import sys
import os.path
import string
import shutil
import traceback
sys.path.append("lib")
import cgWParams
import cgWDictFile
import cgWConsts
import cgWCreate
import cgWParamDict


################################################################################

def main(params):
    #print params.__dict__
    glidein_dicts_obj=cgWParamDict.glideinDicts(params)
    glidein_dicts_obj.populate()

    create_dir(params.submit_dir)
    try:
        # create log submit subdir
        create_dir(os.path.join(params.submit_dir,"log")) # no try/except needed, will be deleted by external except if needed

        # create entry dirs, including internal log dirs
        for entry_name in params.entries.keys():
            entry_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_submit_dir
            create_dir(entry_dir)
            create_dir(os.path.join(entry_dir,"log"))
        
        create_dir(params.stage_dir)
        try:
            # create entry dirs
            for entry_name in params.entries.keys():
                entry_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_stage_dir
                create_dir(entry_dir) # no try/except needed, will be deleted by external except if needed

            create_dir(params.monitor_dir)
            try:
               # create entry dirs
               for entry_name in params.entries.keys():
                   entry_dir=cgWConsts.get_entry_monitor_dir(params.monitor_dir,entry_name)
                   create_dir(entry_dir) # no try/except needed, will be deleted by external except if needed
                    
               # make a link from the submit dir to the monitor dir
               symlink_file(params.monitor_dir,os.path.join(params.submit_dir)+"/monitor")

               # save files in dictionaries
               glidein_dicts_obj.save()
               glidein_dicts_obj.set_readonly(True)

               #
               # Stage is finished
               # Populate submit dir
               #

               # copy the startup file
               copy_submit_file(cgWConsts.STARTUP_FILE,params.submit_dir,params.src_dir)

               link_attributes(params.submit_dir,params.stage_dir,bool(params.stage.use_symlink))
               for entry_name in params.entries.keys():
                   entry_stage_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_stage_dir
                   entry_submit_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_submit_dir
                   link_attributes(entry_submit_dir,entry_stage_dir,bool(params.stage.use_symlink))

               cgWCreate.create_glidein_descript(params.submit_dir,
                                                 params.factory_name,params.glidein_name,
                                                 params.web_url,
                                                 params.entries.keys())

               cgWCreate.create_submit(params.submit_dir,
                                       params.factory_name,params.glidein_name,
                                       params.web_url)

               cgWCreate.create_submit_wrapper(params.submit_dir)
               cgWCreate.create_test_submit(params.submit_dir)

               params.save_into_file(os.path.join(params.submit_dir,cgWConsts.XML_CONFIG_FILE))

               global_schedd_names=string.split(params.schedd_name,',')
               global_schedd_idx=0
               for entry_name in params.entries.keys():
                   entry_stage_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_stage_dir
                   entry_submit_dir=glidein_dicts_obj.entry_dicts[entry_name].entry_submit_dir
                   entry_el=params.entries[entry_name]

                   schedd_name=entry_el.schedd_name
                   if schedd_name==None:
                       # use one of the global ones if specific not provided
                       schedd_name=global_schedd_names[global_schedd_idx%len(global_schedd_names)]
                       global_schedd_idx=global_schedd_idx+1
                   
                   cgWCreate.create_job_descript(entry_submit_dir,entry_name,
                                                 entry_el.gridtype,entry_el.gatekeeper,entry_el.rsl,
                                                 schedd_name,
                                                 entry_el.work_dir,entry_el.proxy_url)

            except:
               shutil.rmtree(params.monitor_dir)
               raise
        except:
            shutil.rmtree(params.stage_dir)
            raise
    except:
        shutil.rmtree(params.submit_dir)
        raise

    print "Created glidein '%s'"%params.glidein_name
    print "Submit files can be found in %s"%params.submit_dir
    print "Support files are in %s"%params.stage_dir
    print "Monitoring files are in %s"%params.monitor_dir


############################################################
#
# P R I V A T E - Do not use
# 
############################################################


#####################
# Simply create a dir
def create_dir(dirname):
    try:
        os.mkdir(dirname)
    except OSError, e:
        raise RuntimeError, "Cannot create dir %s: %s"%(dirname,e)

#####################
# Simply copy a file
def copy_file(infile,outfile):
    try:
        shutil.copy2(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error copying %s in %s: %s"%(infile,outfile,e)
        
#######################
# Simply symlink a file
def symlink_file(infile,outfile):
    try:
        os.symlink(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error symlink %s in %s: %s"%(infile,outfile,e)
        

###################################
# Create a copy or a link in the
# submit dir
def link_attributes(submit_dir,stage_dir,do_softlink):
    submit_filepath=os.path.join(submit_dir,cgWConsts.ATTRS_FILE)
    stage_filepath=os.path.join(stage_dir,cgWConsts.ATTRS_FILE)

    if do_softlink:
        symlink_file(stage_filepath,submit_filepath)
    else:
        copy_file(stage_filepath,submit_filepath)
        # Make it read only
        os.chmod(filepath,0444)

#####################
# Copy a regular file
def copy_submit_file(filename,submit_dir,org_dir):
    copy_file(os.path.join(org_dir,filename),submit_dir)

    
############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    try:
        params=cgWParams.Params(sys.argv)
    except RuntimeError,e:
        print e
        sys.exit(1)
    try:
        main(params)
    except RuntimeError, e:
        print params.usage()
        print ""
        print e

###########################################################
#
# CVS info
#
# $Id: create_glidein,v 1.114 2007/12/11 23:31:46 sfiligoi Exp $
#
# Log:
#  $Log: create_glidein,v $
#  Revision 1.114  2007/12/11 23:31:46  sfiligoi
#  Create entry_dirs in a single place
#
#  Revision 1.113  2007/12/11 23:26:25  sfiligoi
#  Consistently use entry_dirs
#
#  Revision 1.112  2007/12/11 23:11:08  sfiligoi
#  Fix typo
#
#  Revision 1.111  2007/12/11 23:09:54  sfiligoi
#  Move the population of dictionaries into cgWParamDict
#
#  Revision 1.74  2007/05/18 19:07:18  sfiligoi
#  Add CVS tags
#
#
###########################################################
