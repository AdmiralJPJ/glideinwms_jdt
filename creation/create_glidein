#!/bin/env python

import popen2
import os
import copy
import sys
import os.path
import string
import shutil
import traceback
sys.path.append("lib")
import cgWParams
import cgWConsts
import cgWCreate


################################################################################

def main(params):
    #print params.__dict__
    create_dir(params.submit_dir)
    try:
        # create log submit subdir
        create_dir(os.path.join(params.submit_dir,"log")) # no try/except needed, will be deleted by external except if needed

        # create entry dirs, including internal log dirs
        for entry_name in params.entries.keys():
            entry_dir=os.path.join(params.submit_dir,"entry_"+entry_name)
            create_dir(entry_dir)
            create_dir(os.path.join(entry_dir,"log"))
        
        create_dir(params.stage_dir)
        try:
            # create entry dirs
            for entry_name in params.entries.keys():
                entry_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                create_dir(entry_dir) # no try/except needed, will be deleted by external except if needed

            create_dir(params.monitor_dir)
            try:
               # create entry dirs
               for entry_name in params.entries.keys():
                   entry_dir=os.path.join(params.monitor_dir,"entry_"+entry_name)
                   create_dir(entry_dir) # no try/except needed, will be deleted by external except if needed
                    
               # make a link from the submit dir to the monitor dir
               symlink_file(params.monitor_dir,os.path.join(params.submit_dir)+"/monitor")

               # create basic description file(s)
               create_description_file(params.stage_dir)
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   create_description_file(entry_stage_dir)

               # put user files in stage
               for file in params.files:
                   copy_file_unparsed(file,params.stage_dir,params.submit_dir)
               ## repeat for all the entries
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   entry_submit_dir=os.path.join(params.submit_dir,"entry_"+entry_name)
                   for file in params.entries[entry_name].files:
                       copy_file_unparsed(file,entry_stage_dir,entry_submit_dir)

               #put condor tarball into stage
               if params.condor.tar_file!=None: # condor tarball available
                   condor_uf=cgWParams.SubParams({"absfname":params.condor.tar_file,
                                                  "relfname":cgWConsts.CONDOR_FILE,
                                                  "const":"True",
                                                  "untar":"True",
                                                  "untar_options":{"cond_attr":None,
                                                                   "dir":cgWConsts.CONDOR_DIR,
                                                                   "absdir_outattr":cgWConsts.CONDOR_ATTR}})
                   copy_file_unparsed(condor_uf,params.stage_dir,params.submit_dir)
               else: # create a new tarball
                   create_condor_tar(params.stage_dir,params.submit_dir,params.condor.base_dir)
               
               #put system files into stage
               copy_stage_file("parse_starterlog.awk",params.stage_dir,params.src_dir)
               copy_stage_file("condor_config",params.stage_dir,params.src_dir)
               copy_file(os.path.join(params.src_dir,'condor_vars.lst'),os.path.join(params.stage_dir,cgWConsts.VARS_FILE)) # will be modified when attrs processed
               copy_script("setup_x509.sh",params.stage_dir,params.src_dir)
               copy_script("validate_node.sh",params.stage_dir,params.src_dir)
               
                ## repeat for all the entries
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   copy_file(os.path.join(params.src_dir,'condor_vars.lst.entry'),os.path.join(entry_stage_dir,cgWConsts.VARS_FILE)) # will be modified when attrs processed
                   copy_stage_file("nodes.blacklist",entry_stage_dir,params.src_dir,can_be_modified=1)
              
               # put user attributes into config files
               for attr_name in params.attrs.keys():
                   add_attr_unparsed(attr_name, params.attrs[attr_name],params.stage_dir,params.submit_dir)

               # add the basic standard params
               add_param(params.submit_dir,"GLIDEIN_Collector",'Fake',is_string=True)
               # finalize
               add_attr_files(params.stage_dir,params.submit_dir)

               ## repeat for all the entries
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   entry_submit_dir=os.path.join(params.submit_dir,"entry_"+entry_name)
                   for attr_name in params.entries[entry_name].attrs.keys():
                       add_attr_unparsed(attr_name, params.entries[entry_name].attrs[attr_name],entry_stage_dir,entry_submit_dir)
                   add_attr_files(entry_stage_dir,entry_submit_dir)

               # this must be the last script in the list
               copy_script(cgWConsts.CONDOR_STARTUP_FILE,params.stage_dir,params.src_dir)
               add_description(params.stage_dir,cgWConsts.CONDOR_STARTUP_FILE,"last_script")

               #
               # Stage is finished
               # Populate submit dir
               #

               # copy the startup file
               copy_submit_file(cgWConsts.STARTUP_FILE,params.submit_dir,params.src_dir)

               link_attributes(params.submit_dir,params.stage_dir,bool(params.stage.use_symlink))
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   entry_submit_dir=os.path.join(params.submit_dir,"entry_"+entry_name)
                   link_attributes(entry_submit_dir,entry_stage_dir,bool(params.stage.use_symlink))

               cgWCreate.create_glidein_descript(params.submit_dir,
                                                 params.factory_name,params.glidein_name,
                                                 params.web_url,
                                                 params.entries.keys())

               cgWCreate.create_submit(params.submit_dir,
                                       params.factory_name,params.glidein_name,
                                       params.web_url)

               cgWCreate.create_submit_wrapper(params.submit_dir)
               cgWCreate.create_test_submit(params.submit_dir)

               params.save_into_file(os.path.join(params.submit_dir,"glideinWMS.xml"))

               global_schedd_names=string.split(params.schedd_name,',')
               global_schedd_idx=0
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   entry_submit_dir=os.path.join(params.submit_dir,"entry_"+entry_name)
                   entry_el=params.entries[entry_name]

                   schedd_name=entry_el.schedd_name
                   if schedd_name==None:
                       # use one of the global ones if specific not provided
                       schedd_name=global_schedd_names[global_schedd_idx%len(global_schedd_names)]
                       global_schedd_idx=global_schedd_idx+1
                   
                   cgWCreate.create_job_descript(entry_submit_dir,entry_name,
                                                 entry_el.gridtype,entry_el.gatekeeper,entry_el.rsl,
                                                 schedd_name,
                                                 entry_el.work_dir,entry_el.proxy_url)

               # calculate signatures
               add_file(cgWConsts.VARS_FILE,params.stage_dir,0,"condor_vars") # now I can finally register it
               sha1=finalize_sha1(params.stage_dir,params.submit_dir,"main")
               for entry_name in params.entries.keys():
                   entry_stage_dir=os.path.join(params.stage_dir,"entry_"+entry_name)
                   add_file(cgWConsts.VARS_FILE,entry_stage_dir,0,"condor_vars") # now I can finally register it
                   esha1=finalize_sha1(entry_stage_dir,params.submit_dir,"entry_"+entry_name)
            except:
               shutil.rmtree(params.monitor_dir)
               raise
        except:
            shutil.rmtree(params.stage_dir)
            raise
    except:
        shutil.rmtree(params.submit_dir)
        raise

    print "Created glidein '%s'"%params.glidein_name
    print "Submit files can be found in %s"%params.submit_dir
    print "Support files are in %s"%params.stage_dir
    print "Monitoring files are in %s"%params.monitor_dir


############################################################
#
# P R I V A T E - Do not use
# 
############################################################

#####################
# Simply create a dir
def create_dir(dirname):
    try:
        os.mkdir(dirname)
    except OSError, e:
        raise RuntimeError, "Cannot create dir %s: %s"%(dirname,e)

#####################
# Simply copy a file
def copy_file(infile,outfile):
    try:
        shutil.copy2(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error copying %s in %s: %s"%(infile,outfile,e)
        
#######################
# Simply symlink a file
def symlink_file(infile,outfile):
    try:
        os.symlink(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error symlink %s in %s: %s"%(infile,outfile,e)
        

########################
# Write a line in a file
def add_line(filename,dir,line):
    filepath=os.path.join(dir,filename)
    try:
        fd=open(filepath,"a+")
    except IOError,e:
        raise RuntimeError, "Error appending to %s: %s"%(filepath,e)
    try:
        fd.write("%s\n"%line)
    finally:
        fd.close()

############################
# Add a file description
def add_description(stage_dir,fname,description):
    add_line(cgWConsts.DESCRIPTION_FILE,stage_dir,"%s \t%s"%(description,fname))

############################
# Add a published attributed
def add_attr(stage_dir,attr_name,attr_val,is_string):
    if is_string:
        attr_val=repr(attr_val)
    else:
        attr_val=repr(int(attr_val))

    add_line(cgWConsts.ATTRS_FILE,stage_dir,"%s \t%s"%(attr_name,attr_val))

############################
# Add a constant attribute
def add_const(stage_dir,attr_name,attr_val):
    add_line(cgWConsts.CONSTS_FILE,stage_dir,"%s \t%s"%(attr_name,attr_val))

########################
# Add a parameter
def add_param(submit_dir,param_name,param_defval,is_string):
    if is_string:
        param_defval=repr(param_defval)
    else:
        param_defval=repr(int(param_defval))

    add_line(cgWConsts.PARAMS_FILE,submit_dir,"%s \t%s"%(param_name,param_defval))

#################################
# Calculate SHA1 for the file
def calc_sha1(filename,stage_dir):
    filepath=os.path.join(stage_dir,filename)
    try:
        sha1=string.split(exe_cmd("sha1sum %s"%filepath)[0])[0]
    except RuntimeError, e:
        raise RuntimeError, "Error calculating SHA1 for %s: %s"%(filepath,e)
    return sha1

#################################
# Calculate SHA1 for the file and
# put it into the signature file
def add_sha1(filename,stage_dir):
    sha1=calc_sha1(filename,stage_dir)
    add_line(cgWConsts.SIGNATURE_FILE,stage_dir,"%s  %s"%(sha1,filename))

#################################
# Add a new variable to VARS_FILE
def add_var(stage_dir,attr_name,is_string,do_glidein_publish,do_job_publish):
    type_str={True:"S",False:"I"}
    glide_str={True:"Y",False:"N"}
    job_str={True:"+",False:"-"}
    add_line(cgWConsts.VARS_FILE,stage_dir,
             "%s\t%s\t-\t+\tN\t%s\t%s"%(attr_name,type_str[is_string],glide_str[do_glidein_publish],job_str[do_job_publish]))
    
#########################
# Register a regular file
def add_file(filename,stage_dir,can_be_modified=0,description=None):
    if can_be_modified:
        add_line(cgWConsts.FILE_LISTFILE,stage_dir,"%s nocache"%filename)
    else:
        add_sha1(filename,stage_dir)
        add_line(cgWConsts.FILE_LISTFILE,stage_dir,filename)
    if description!=None:
        add_description(stage_dir,filename,description)

###################
# Register a script
def add_script(filename,stage_dir):
    add_sha1(filename,stage_dir)
    add_line(cgWConsts.SCRIPT_LISTFILE,stage_dir,filename)

######################
# Register a subsystem
def add_subsystem(filename,stage_dir,submit_dir,config_check,wnsubdir,config_out):
    if config_check==None:
        config_check="TRUE" #TRUE has a special meaning for the glidein
    add_sha1(filename,stage_dir)
    add_line(cgWConsts.SUBSYSTEM_LISTFILE,stage_dir,"%s %s %s %s"%(config_check,wnsubdir,filename,config_out))
    if config_check!="TRUE":
        # TRUE is not a real parameter, so no need to log it
        add_param(submit_dir,config_check,0,is_string=False) # if it is optional, default==0

##########################################
# Calculate SHA1 for the list files
# Return the sha1sum of the signature file
def finalize_sha1(stage_dir,submit_dir,title):
    for f in (cgWConsts.FILE_LISTFILE,cgWConsts.SCRIPT_LISTFILE,cgWConsts.SUBSYSTEM_LISTFILE,cgWConsts.DESCRIPTION_FILE):
        # touch the file, in case it does not exist
        filepath=os.path.join(stage_dir,f)
        try:
            fd=open(filepath,"a+")
        except IOError,e:
            raise RuntimeError, "Error appending to %s: %s"%(filepath,e)
        fd.close()
        # calc sha1
        add_sha1(f,stage_dir)
    sha1=calc_sha1(cgWConsts.SIGNATURE_FILE,stage_dir)
    add_line(cgWConsts.SUMMARY_cgWConsts.SIGNATURE_FILE,submit_dir,"%s  %s  %s"%(sha1,cgWConsts.DESCRIPTION_FILE,title))
    return sha1
    
##########################################
# Calculate SHA1 for the list files
# Return the sha1sum of the signature file
def create_description_file(stage_dir):
    add_description(stage_dir,cgWConsts.SIGNATURE_FILE,"signature")
    add_description(stage_dir,cgWConsts.FILE_LISTFILE,"file_list")
    add_description(stage_dir,cgWConsts.SCRIPT_LISTFILE,"script_list")
    add_description(stage_dir,cgWConsts.SUBSYSTEM_LISTFILE,"subsystem_list")
    
#####################
# Copy a regular file
def copy_stage_file(filename,stage_dir,org_dir,can_be_modified=0,out_fname=None,description=None):
    if out_fname==None:
        copy_file(os.path.join(org_dir,filename),stage_dir)
        add_file(filename,stage_dir,can_be_modified,description)
    else:
        copy_file(os.path.join(org_dir,filename),os.path.join(stage_dir,out_fname))
        add_file(out_fname,stage_dir,can_be_modified,description)

###############
# Copy a script
def copy_script(filename,stage_dir,org_dir):
    copy_file(os.path.join(org_dir,filename),stage_dir)
    add_script(filename,stage_dir)

######################
# Copy a subsystem
def copy_subsystem(filename,stage_dir,submit_dir,org_dir,config_check,wnsubdir,config_out):
    copy_file(os.path.join(org_dir,filename),stage_dir)
    add_subsystem(filename,stage_dir,submit_dir,config_check,wnsubdir,config_out)

#####################
# Copy a user file
# file as described by Params.file_defaults
def copy_file_unparsed(file,stage_dir,submit_dir):
    if file.absfname==None:
        raise RuntimeError, "Found a file element without a absname: %s"%file
    
    relfname=file.relfname
    if relfname==None:
        relfname=os.path.basename(file.absfname) # defualt is the final part of absfname
    if len(relfname)<1:
        raise RuntimeError, "Found a file element with an empty relfname: %s"%file

    copy_file(file.absfname,os.path.join(stage_dir,relfname))
    
    is_const=eval(file.const,{},{})
    is_executable=eval(file.executable,{},{})
    do_untar=eval(file.untar,{},{})

    if is_executable: # a script
        if not is_const:
            raise RuntimeError, "A file cannot be executable if it is not constant: %s"%file
    
        if do_untar:
            raise RuntimeError, "A tar file cannot be executable: %s"%file

        add_script(relfname,stage_dir)
    elif do_untar: # a tarball
        if not is_const:
            raise RuntimeError, "A file cannot be untarred if it is not constant: %s"%file

        wnsubdir=file.untar_options.dir
        if wnsubdir==None:
            wnsubdir=string.split(relfname,'.',1)[0] # deafult is relfname up to the first .

        #temporary, should be fixed in future versions
        if file.untar_options.absdir_outattr==None:
            raise RuntimeError, 'Currently untar_options.absdir_outattr must be defined: %s'%file
        
        add_subsystem(relfname,stage_dir,submit_dir,file.untar_options.cond_attr,wnsubdir,file.untar_options.absdir_outattr)
    else: # not executable nor tarball => simple file
        add_file(relfname,stage_dir,not is_const,None)


#######################
# Register an attribute
# attr_obj as described by Params.attr_defaults
def add_attr_unparsed(attr_name,attr_obj,stage_dir,submit_dir):
    if attr_obj.value==None:
        raise RuntimeError, "Attribute '%s' does not have a value: %s"%(attr_name,attr_obj)
    
    do_publish=eval(attr_obj.publish,{},{})
    is_parameter=eval(attr_obj.parameter,{},{})
    is_const=eval(attr_obj.const,{},{})

    if (not attr_obj.type in ("string","int")):
        raise RuntimeError, "Wrong type '%s' for attribute '%s', must be either 'int' or 'string'"%(attr_obj.type,attr_name)
    
    if do_publish: # publish in factory ClassAd
        if is_parameter: # but also push to glidein
            if is_const:
                add_attr(stage_dir,attr_name,attr_obj.value,attr_obj.type=="string")
                add_const(stage_dir,attr_name,attr_obj.value)
            else:
                add_param(submit_dir,attr_name,attr_obj.value,attr_obj.type=="string")
        else: # only publish
            if (not is_const):
                raise RuntimeError, "Published attribute '%s' must be either a parameter or constant: %s"%(attr_name,attr_obj)
            
            add_attr(stage_dir,attr_name,attr_obj.value,attr_obj.type=="string")
    else: # do not publish, only to glidein
        if is_parameter:
            if is_const:
                add_const(stage_dir,attr_name,attr_obj.value)
            else:
                raise RuntimeError, "Parameter attributes '%s' must be either a published or constant: %s"%(attr_name,attr_obj)
        else:
            raise RuntimeError, "Attributes '%s' must be either a published or parameters: %s"%(attr_name,attr_obj) 

    if is_parameter:
        do_glidein_publish=eval(attr_obj.glidein_publish,{},{})
        do_job_publish=eval(attr_obj.job_publish,{},{})

        if do_glidein_publish or do_job_publish:
            # need to add a line only if will be published
            add_var(stage_dir,attr_name,attr_obj.type=="string",do_glidein_publish,do_job_publish)

#############################################
# Register the files that host the attributes
def add_attr_files(stage_dir,submit_dir):
    for fname,description in ((cgWConsts.ATTRS_FILE,"attrs_file"),(cgWConsts.CONSTS_FILE,"consts_file")):
        # touch the file, in case it does not exist
        filepath=os.path.join(stage_dir,fname)
        try:
            fd=open(filepath,"a+")
        except IOError,e:
            raise RuntimeError, "Error appending to %s: %s"%(filepath,e)
        fd.close()
        # register it
        add_file(fname,stage_dir,0,description)
    # also make sure that the params file exist
    filepath=os.path.join(submit_dir,cgWConsts.PARAMS_FILE)
    try:
        fd=open(filepath,"a+")
    except IOError,e:
        raise RuntimeError, "Error appending to %s: %s"%(filepath,e)
    fd.close()

     
##############################
# Execute a command in a shell
def exe_cmd(cmd):
    childout, childin, childerr = popen2.popen3(cmd)
    childin.close()
    tempOut = childout.readlines()
    childout.close()
    tempErr = childerr.readlines()
    childerr.close()
    if (len(tempErr)!=0):
        raise RuntimeError, "Error running '%s'\n%s"%(cmd,tempErr)
    return tempOut


##############################
# Create condor tarball and
# add it to the list of subsaystems
def create_condor_tar(stage_dir,submit_dir,condor_base_dir):
    cgWCreate.create_condor_tar(stage_dir,submit_dir,condor_base_dir)
    add_subsystem(cgWConsts.CONDOR_FILE,stage_dir,submit_dir,None,cgWConsts.CONDOR_DIR,cgWConsts.CONDOR_ATTR)


###################################
# Create a copy or a link in the
# submit dir
def link_attributes(submit_dir,stage_dir,do_softlink):
    submit_filepath=os.path.join(submit_dir,cgWConsts.ATTRS_FILE)
    stage_filepath=os.path.join(stage_dir,cgWConsts.ATTRS_FILE)

    if do_softlink:
        symlink_file(stage_filepath,submit_filepath)
    else:
        copy_file(stage_filepath,submit_filepath)
        # Make it read only
        os.chmod(filepath,0444)

#####################
# Copy a regular file
def copy_submit_file(filename,submit_dir,org_dir):
    copy_file(os.path.join(org_dir,filename),submit_dir)

    
############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    params=cgWParams.Params(sys.argv)
    try:
        main(params)
    except RuntimeError, e:
        params.usage()
        print ""
        print e

###########################################################
#
# CVS info
#
# $Id: create_glidein,v 1.85 2007/10/12 21:01:17 sfiligoi Exp $
#
# Log:
#  $Log: create_glidein,v $
#  Revision 1.85  2007/10/12 21:01:17  sfiligoi
#  Moved consts and creation funcs into dedicated modules
#
#  Revision 1.84  2007/10/12 19:27:04  sfiligoi
#  Moved cgWParams to lib subdir
#
#  Revision 1.83  2007/10/12 19:18:48  sfiligoi
#  Move find_condor_base_dir to the right place
#
#  Revision 1.82  2007/10/12 19:11:12  sfiligoi
#  Put config file parsing in a separate module
#
#  Revision 1.81  2007/07/18 22:38:30  sfiligoi
#  Add printout from parsing Condor StarterLog
#
#  Revision 1.80  2007/07/11 23:46:32  sfiligoi
#  Put description_file name into signatures.cfg
#
#  Revision 1.79  2007/07/11 22:55:19  sfiligoi
#  Rename DESCRIPT_FILE into JOB_DESCRIPT_FILE to prevent confision with the new DESCRIPTION_FILE
#
#  Revision 1.78  2007/07/11 21:57:31  sfiligoi
#  Add inital support for several versions of files in the stage area
#
#  Revision 1.77  2007/05/18 20:35:05  sfiligoi
#  Fix submit file to handle multiple schedds
#
#  Revision 1.76  2007/05/18 19:57:32  sfiligoi
#  Add support for listds of schedds
#
#  Revision 1.75  2007/05/18 19:36:21  sfiligoi
#  Add support for entry-specific schedd_names
#
#  Revision 1.74  2007/05/18 19:07:18  sfiligoi
#  Add CVS tags
#
#
###########################################################
