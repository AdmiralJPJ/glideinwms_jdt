#!/bin/env python

import popen2
import os
import sys
import os.path
import time
import string
import shutil
import socket
import traceback

class Params:
    def __init__(self,argv):
        self.param_desc=(("factory_name",('-F','-factory'),socket.gethostname(),'ID', 'Factory name'),
                         ("glidein_name",('-n','-name'),None,'ID', 'Glidein name'),
                         ("gatekeeper",('-g','-gatekeeper'),None,'gatekeeper', 'Grid gatekeeper/resource'),
                         ("gridtype",('-u','-gridtype'),'gt2','grid_type','Condor Grid type'),
                         ("rsl",('-r','-rsl'),None,'RSL','Globus RSL option'),
                         ("work_dir",('-s','-startdir'),".","Where to start glidein, usually 'OSG','Condor' or '.'"),
                         ("submit_base_dir",('-S','-submitbase'),os.environ["HOME"],"base_dir","Submit base dir"),
                         ("stage_base_dir",('-W','-stagebase'),"/var/www/html/glidestage","base_dir","Stage base dir"),
                         ("stage_symlink",('-L','-stagesymlink'),"1","Bool","Can I symlink stage dir?"),
                         ("monitor_base_dir",('-M','-monitorbase'),"/var/www/html/glidemonitor","base_dir","Monitoring base dir"),
                         ("condor_base_dir",('-C','-condorbase'),find_condor_base_dir(), "base_dir","Condor distribution base dir"),
                         ("web_base_url",('-w','-webdir'),"http://%s/glidestage"%socket.gethostname(),'base_url','Base Web server URL'),
                         ('proxy_url',('-p','-proxy'),None,'proxy_url',"Squid cache to use"),
                         ('schedd_name',('-d','-schedd'),"schedd_glideins@%s"%socket.gethostname(),"ScheddName","Which schedd to use"),
                         ('glidein_attrs',('-a','-attr'),[],'name=val',"Glidein attribute, repeat as needed"),
                         ('glidein_consts',('-n','-const'),[],'name=val',"Glidein constant, repeat as needed"),
                         ('user_params',('-m','-param'),[],'name=val',"User param, repeat as needed"),
                         ('user_files',('-f','-file'),[],'absname[:relname[:can_modify]]',"User file to ship to WN, repeat as needed"),
                         ('user_scripts',('-c','-script'),[],'absname[:relname]',"User script to execute on WN, repeat as needed"),
                         ('user_subsys',('-y','-subsys'),[],'absname:conf_sw:dir:out_conf[:relname]',"User subsytem to ship to WN, repeat as needed"),
                         (self.load_file,('-e','-cfg'),None,'filename',"Load configuration file")
                         )

        self.src_dir=os.path.join(os.getcwd(),"web_base")

        # load values from arguments
        self.init()
        
        # load values from arguments
        self.parse(argv[1:])
        # create derived values
        self.derive()
        pass

    def derive(self):
        if self.glidein_name==None:
            self.usage()
            raise RuntimeError, "Missing glidein name"
        
        if self.gatekeeper==None:
            self.usage()
            raise RuntimeError, "Missing gatekeeper"
        
        if self.condor_base_dir==None:
            self.usage()
            raise RuntimeError, "Missing condor base dir"
        
        glidein_subdir="glidein_%s"%self.glidein_name
        self.stage_dir=os.path.join(self.stage_base_dir,glidein_subdir)
        self.monitor_dir=os.path.join(self.monitor_base_dir,glidein_subdir)
        self.submit_dir=os.path.join(self.submit_base_dir,glidein_subdir)
        self.web_url=os.path.join(self.web_base_url,glidein_subdir)


    def init(self):
        for el in self.param_desc:
            param_name=el[0]
            if type(param_name)==type(""):
                # only if a regular parameter
                param_def=el[2]
                exec('self.%s=%s'%(param_name,repr(param_def)))
            # else it is a special one that does not need initialization

    def parse(self,argv):
        argidx=0
        while (argidx<len(argv)):
            arg_name=argv[argidx]
            argidx+=1
            arg_val=argv[argidx]
            argidx+=1
            found=0
            for el in self.param_desc:
                param_strs=el[1]                
                if arg_name in param_strs:
                    param_name=el[0]
                    if type(param_name)==type(""):
                        # regular type, assign
                        if eval("type(self.%s)"%param_name)==type([]):
                            # append if a list
                            exec("self.%s.append(%s)"%(param_name,repr(arg_val)))
                        else:
                            exec("self.%s=%s"%(param_name,repr(arg_val)))
                    else:
                        # special type, exec
                        param_name(arg_val)
                    found=1
                    break
            if not found:
                self.usage()
                raise RuntimeError,"Unknown arg '%s'"%arg_name

    #load from a file
    #one element per line
    # -opt val
    def load_file(self,fname):
        fd=open(fname,"r")
        try:
            lines=fd.readlines()
        finally:
            fd.close()
        argv=[]
        for line in lines:
            line=string.strip(line)
            if len(line)==0:
                continue #skip empty lines
            if line[0]=='#':
                continue #skip comments
            
            name,val=string.split(line,None,1)
            argv.append(name)
            argv.append(val)

        self.parse(argv)

    def usage(self):
        print "Usage: create_glidein <opts>"
        print "where <opts> are:"
        for el in self.param_desc:
            param_str=string.join(el[1],"|")
            param_def=el[2]
            param_opt_name=el[-2]
            param_desc=el[-1]
            print "\t%-30s - %s (Default=%s)"%("%s <%s>  "%(param_str,param_opt_name),param_desc,repr(param_def))

    #save into a file
    #The file should be usable for reload
    # -opt val
    def save_into_file(self,fname):
        fd=open(fname,"w")
        try:
            for el in self.param_desc:
                param_name=el[0]
                if type(param_name)==type(""):
                    # only if a regular parameter
                    param_flag=el[1][-1]
                    exec('param_vals=self.%s'%param_name)
                    if type(param_vals)!=type([]):
                        # treat everything a a list... much easier
                        param_vals=[param_vals]
                    for param_val in param_vals:
                        if param_val!=None:
                          fd.write("%s %s\n"%(param_flag,param_val))
                # else it is a special one that cannot be saved
        finally:
            fd.close()
        return
    

################################################################################

def main(params):
    #print params.__dict__
    create_dir(params.submit_dir)
    try:
        create_dir(params.stage_dir)
        try:
            create_dir(params.monitor_dir)
            try:
               # make a link from the submit dir to the monitor dir
               symlink_file(params.monitor_dir,os.path.join(params.submit_dir)+"/monitor")

               # put user files in stage
               for id in params.user_files:
                   copy_user_file(id,params.stage_dir)
               for id in params.user_scripts:
                   copy_user_script(id,params.stage_dir)
               for id in params.user_subsys:
                   copy_user_subsystem(id,params.stage_dir,params.submit_dir)

               #put known files in stage
               create_condor_tar(params.stage_dir,params.submit_dir,params.condor_base_dir)
               copy_stage_file("condor_config",params.stage_dir,params.src_dir)
               copy_stage_file("condor_vars.lst",params.stage_dir,params.src_dir)
               copy_stage_file("nodes.blacklist",params.stage_dir,params.src_dir,can_be_modified=1)
               copy_script("setup_x509.sh",params.stage_dir,params.src_dir)
               copy_script("validate_node.sh",params.stage_dir,params.src_dir)
               create_attributes(params.stage_dir,params.glidein_attrs)
               create_consts(params.stage_dir,params.glidein_consts)

               # this must be the last script in the list
               copy_script("condor_startup.sh",params.stage_dir,params.src_dir)
               sha1=finalize_sha1(params.stage_dir)

               #
               # Stage is finished
               # Populate submit dir
               #
               create_dir(os.path.join(params.submit_dir,"log"))

               # Write down the user parameters
               for id in params.user_params:
                   add_user_param(id,params.submit_dir)

               # plus the basic standard params
               add_param(params.submit_dir,"GLIDEIN_Collector",'"Fake"')

               # copy the startup file
               copy_submit_file(STARTUP_FILE,params.submit_dir,params.src_dir)

               link_attributes(params.submit_dir,params.stage_dir,int(params.stage_symlink))

               create_descript(params.submit_dir,
                               params.factory_name,params.glidein_name,
                               params.gridtype,params.gatekeeper,params.rsl,
                               params.schedd_name,
                               params.work_dir,params.web_url,params.proxy_url)

               create_submit(params.submit_dir,
                             params.factory_name,params.glidein_name,
                             params.gridtype,params.gatekeeper,params.rsl,
                             params.schedd_name,
                             params.work_dir,params.web_url,params.proxy_url,sha1)

               create_submit_wrapper(params.submit_dir)
               create_test_submit(params.submit_dir)

               params.save_into_file(os.path.join(params.submit_dir,"glideinWMS.cfg"))
            except:
               shutil.rmtree(params.monitor_dir)
               raise
        except:
            shutil.rmtree(params.stage_dir)
            raise
    except:
        shutil.rmtree(params.submit_dir)
        raise

    print "Created glidein '%s'"%params.glidein_name
    print "Submit files can be found in %s"%params.submit_dir
    print "Support files are in %s"%params.stage_dir
    print "Monitoring files are in %s"%params.monitor_dir


############################################################
#
# P R I V A T E - Do not use
# 
############################################################

ATTRS_FILE="attributes.cfg"
CONSTS_FILE="constants.cfg"
FILE_LISTFILE="file_list.lst"
SCRIPT_LISTFILE="script_list.lst"
SUBSYSTEM_LISTFILE="subsystem_list.lst"
SIGNATURE_FILE="signature.sha1"


PARAMS_FILE="params.cfg"
STARTUP_FILE="glidein_startup.sh"
DESCRIPT_FILE="job.descript"
SUBMIT_FILE="job.condor"
SUBMIT_WRAPPER="job_submit.sh"

global_glidein_consts=[]

#####################
# Simply create a dir
def create_dir(dirname):
    try:
        os.mkdir(dirname)
    except OSError, e:
        raise RuntimeError, "Cannot create dir %s: %s"%(dirname,e)

#####################
# Simply copy a file
def copy_file(infile,outfile):
    try:
        shutil.copy2(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error copying %s in %s: %s"%(infile,outfile,e)
        
#######################
# Simply symlink a file
def symlink_file(infile,outfile):
    try:
        os.symlink(infile,outfile)
    except IOError, e:
        raise RuntimeError, "Error symlink %s in %s: %s"%(infile,outfile,e)
        

########################
# Write a line in a file
def add_line(filename,dir,line):
    filepath=os.path.join(dir,filename)
    try:
        fd=open(filepath,"a+")
    except IOError,e:
        raise RuntimeError, "Error appending to %s: %s"%(filepath,e)
    try:
        fd.write("%s\n"%line)
    finally:
        fd.close()

########################
# Write a line in a file
def add_param(submit_dir,param_name,param_defval):
    global global_glidein_consts
    if param_name in global_glidein_consts:
        raise RuntimeError, "Trying to convert const '%s' into a param!"%param_name

    if param_defval[0]=='"':
        # make sure strings are well defined
        if  param_defval[-1]!='"':
            raise RuntimeError, "Param '%s' start with a quote but does not end with one!"%param_name
        
        param_defval=string.replace(param_defval[1:-1],'\\"','"')
        param_defval=repr(param_defval)
    else:
        if not param_defval.isdigit():
            raise RuntimeError, "Param '%s' not a number and not quoted!"%param_name

    add_line(PARAMS_FILE,submit_dir,"%s \t%s"%(param_name,param_defval))

#################################
# Calculate SHA1 for the file
def calc_sha1(filename,stage_dir):
    filepath=os.path.join(stage_dir,filename)
    try:
        sha1=string.split(exe_cmd("sha1sum %s"%filepath)[0])[0]
    except RuntimeError, e:
        raise RuntimeError, "Error calculating SHA1 for %s: %s"%(filepath,e)
    return sha1

#################################
# Calculate SHA1 for the file and
# put it into the signature file
def add_sha1(filename,stage_dir):
    sha1=calc_sha1(filename,stage_dir)
    add_line(SIGNATURE_FILE,stage_dir,"%s  %s"%(sha1,filename))

#########################
# Register a regular file
def add_file(filename,stage_dir,can_be_modified=0):
    if can_be_modified:
        add_line(FILE_LISTFILE,stage_dir,"%s nocache"%filename)
    else:
        add_sha1(filename,stage_dir)
        add_line(FILE_LISTFILE,stage_dir,filename)

###################
# Register a script
def add_script(filename,stage_dir):
    add_sha1(filename,stage_dir)
    add_line(SCRIPT_LISTFILE,stage_dir,filename)

######################
# Register a subsystem
def add_subsystem(filename,stage_dir,submit_dir,config_check,wnsubdir,config_out):
    add_sha1(filename,stage_dir)
    add_line(SUBSYSTEM_LISTFILE,stage_dir,"%s %s %s %s"%(config_check,wnsubdir,filename,config_out))
    if config_check!="TRUE":
        # TRUE is not a real parameter, so no need to log it
        add_param(submit_dir,config_check,0) # if it is optional, default==0

##########################################
# Calculate SHA1 for the list files
# Return the sha1sum of the signature file
def finalize_sha1(stage_dir):
    for f in (FILE_LISTFILE,SCRIPT_LISTFILE,SUBSYSTEM_LISTFILE):
        add_sha1(f,stage_dir)
    return calc_sha1(SIGNATURE_FILE,stage_dir)
    
#####################
# Copy a regular file
def copy_stage_file(filename,stage_dir,org_dir,can_be_modified=0):
    copy_file(os.path.join(org_dir,filename),stage_dir)
    add_file(filename,stage_dir,can_be_modified)

###############
# Copy a script
def copy_script(filename,stage_dir,org_dir):
    copy_file(os.path.join(org_dir,filename),stage_dir)
    add_script(filename,stage_dir)

######################
# Copy a subsystem
def copy_subsystem(filename,stage_dir,submit_dir,org_dir,config_check,wnsubdir,config_out):
    copy_file(os.path.join(org_dir,filename),stage_dir)
    add_subsystem(filename,stage_dir,submit_dir,config_check,wnsubdir,config_out)
    
#####################
# Copy a user file
# id = absname[:relname[:can_modify]]
def copy_user_file(id,stage_dir):
    can_be_modified=0 #default

    id_list=string.split(id,":")
    if len(id_list)==1:
        copy_file(id,stage_dir)
        filename=os.path.basename(id)
    elif len(id_list) in (2,3):
        filename=id_list[1]
        copy_file(id_list[0],os.path.join(stage_dir,filename))
        
        if len(id_list)==3:
            can_be_modified=int(id_list[2])
    else:
        raise RuntimeError, "Too many : in file arg: %s"%id

    add_file(filename,stage_dir,can_be_modified)

####################
# Copy a user script
# id = absname[:relname]
def copy_user_script(id,stage_dir):
    id_list=string.split(id,":")
    if len(id_list)==1:
        copy_file(id,stage_dir)
        filename=os.path.basename(id)
    elif len(id_list)==2:
        filename=id_list[1]
        copy_file(id_list[0],os.path.join(stage_dir,filename))
    else:
        raise RuntimeError, "Too many : in script arg: %s"%id
        
    add_script(filename,stage_dir)

######################
# Copy a subsystem
# id = absname:conf_sw:dir:out_conf[:relname]
def copy_user_subsystem(id,stage_dir,submit_dir):
    id_list=string.split(id,":")
    if len(id_list)<4:
        raise RuntimeError, "Not enough : in subsys arg: %s"%id
    config_check,wnsubdir,config_out=id_list[1:4]

    if len(id_list)==4:
        copy_file(id_list[0],stage_dir)
        filename=os.path.basename(id_list[0])
    elif len(id_list)==5:
        filename=id_list[4]
        copy_file(id_list[0],os.path.join(stage_dir,filename))
    else:
        raise RuntimeError, "Too many : in subsys arg: %s"%id

    add_subsystem(filename,stage_dir,submit_dir,config_check,wnsubdir,config_out)
    
######################
# Add user param
# id = name=val
def add_user_param(id,submit_dir):
    id_list=string.split(id,"=",1)
    if len(id_list)<2:
        raise RuntimeError, "Not enough = in param arg: %s"%id
    param_name,param_defval=id_list
    add_param(submit_dir,param_name,param_defval)
    
##############################
# Execute a command in a shell
def exe_cmd(cmd):
    childout, childin, childerr = popen2.popen3(cmd)
    childin.close()
    tempOut = childout.readlines()
    childout.close()
    tempErr = childerr.readlines()
    childerr.close()
    if (len(tempErr)!=0):
        raise RuntimeError, "Error running '%s'\n%s"%(cmd,tempErr)
    return tempOut


##############################
# Create condor tarball and
# add it to the list of subsaystems
def create_condor_tar(stage_dir,submit_dir,condor_base_dir):
    tgz_name="condor_bin.tgz"
    outtar_name=os.path.join(stage_dir,tgz_name)
    condor_sbin_dir=os.path.join(condor_base_dir,"sbin")
    try:
        if not os.path.isdir(condor_sbin_dir):
            raise RuntimeError, "%s is not a directory"%condor_sbin_dir
        exe_cmd('cd "%s"; tar -czf "%s" condor_master condor_startd condor_starter'%(condor_sbin_dir,outtar_name))
        
        add_subsystem(tgz_name,stage_dir,submit_dir,"TRUE","condor","CONDOR_DIR")
    except RuntimeError, e:
        raise RuntimeError, "Error creating condor tgz: %s"%e

###################################
# Create attributes config file and
# add it to the list of files
def create_attributes(stage_dir,glidein_attr_ids):
    glidein_attrs={}
    for id in glidein_attr_ids:
        id_list=string.split(id,"=",1)
        if len(id_list)<2:
            raise RuntimeError, "Not enough = in arg: %s"%id
        name,val=id_list
        glidein_attrs[name]=val
    
    global ATTRS_FILE
    filepath=os.path.join(stage_dir,ATTRS_FILE)
    try:
        fd=open(filepath,"a+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        for name in glidein_attrs.keys():
            val=glidein_attrs[name]
            fd.write("%s \t%s\n"%(name,val))
    finally:
        fd.close()
    add_file(ATTRS_FILE,stage_dir)

###################################
# Create consts config file and
# add it to the list of files
def create_consts(stage_dir,glidein_const_ids):
    global global_glidein_consts

    glidein_consts={}
    for id in glidein_const_ids:
        id_list=string.split(id,"=",1)
        if len(id_list)<2:
            raise RuntimeError, "Not enough = in const: %s"%id
        name,val=id_list
        glidein_consts[name]=val
    
    global CONSTS_FILE
    filepath=os.path.join(stage_dir,CONSTS_FILE)
    try:
        fd=open(filepath,"a+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        for name in glidein_consts.keys():
            val=glidein_consts[name]
            fd.write("%s \t%s\n"%(name,val))
            global_glidein_consts.append(name)
    finally:
        fd.close()
    add_file(CONSTS_FILE,stage_dir)

###################################
# Create a copy or a link in the
# submit dir
def link_attributes(submit_dir,stage_dir,do_softlink):
    global ATTRS_FILE
    submit_filepath=os.path.join(submit_dir,ATTRS_FILE)
    stage_filepath=os.path.join(stage_dir,ATTRS_FILE)

    if do_softlink:
        symlink_file(stage_filepath,submit_filepath)
    else:
        copy_file(stage_filepath,submit_filepath)
        # Make it read only
        os.chmod(filepath,0444)

#####################################
# try to find out the base condor dir
def find_condor_base_dir():
    condor_base_path=None
    # try using condor commands to find it out
    try:
        condor_base_path=exe_cmd("condor_config_val RELEASE_DIR")[0][:-1] # remove trailing newline
    except RuntimeError,e:
        # try to find the SBIN, and append go one down
        try:
            release_path=exe_cmd("condor_config_val SBIN")
            condor_base_path=os.path.join(release_path[0][:-1],"..")
        except RuntimeError,e:
            # look for condor_config in /etc
            if os.environ.has_key("CONDOR_CONFIG"):
                condor_config=os.environ["CONDOR_CONFIG"]
            else:
                condor_config="/etc/condor/condor_config"
                
            try:
                # BIN = <path>
                bin_def=exe_cmd('grep "^ *RELEASE_DIR" %s'%condor_config)
                condor_base_path=string.split(bin_def[0][:-1])[2]
            except RuntimeError, e:
                try:
                    # RELEASE_DIR = <path>
                    release_def=exe_cmd('grep "^ *SBIN" %s'%condor_config)
                    condor_base_path=os.path.join(string.split(release_def[0][:-1])[2],"..")
                except RuntimeError, e:
                    pass # don't know what else to try
    return condor_base_path

#####################
# Copy a regular file
def copy_submit_file(filename,submit_dir,org_dir):
    copy_file(os.path.join(org_dir,filename),submit_dir)

#################################
# Create glidein description file
def create_descript(submit_dir,
                    factory_name,glidein_name,
                    gridtype,gatekeeper,rsl,
                    schedd_name,
                    startup_dir,web_base,proxy_id):
    global DESCRIPT_FILE
    filepath=os.path.join(submit_dir,DESCRIPT_FILE)
    try:
        fd=open(filepath,"w+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        fd.write("FactoryName   %s\n"%factory_name)
        fd.write("GlideinName   %s\n"%glidein_name)
        fd.write("Schedd        %s\n"%schedd_name)
        fd.write("GridType      %s\n"%gridtype)
        fd.write("Gatekeeper    %s\n"%gatekeeper)
        if rsl!=None:
            fd.write("GlobusRSL     %s\n"%rsl)
        fd.write("StartupDir    %s\n"%startup_dir)
        fd.write("WebURL        %s\n"%web_base)
        if proxy_id!=None:
            fd.write("ProxyURL      %s\n"%proxy_id)
    finally:
        fd.close()
    
###########################
# Create Condor submit file
def create_submit(submit_dir,
                  factory_name,glidein_name,
                  gridtype,gatekeeper,rsl,
                  schedd_name,
                  startup_dir,web_base,proxy_id,sha1):
    global SUBMIT_FILE
    filepath=os.path.join(submit_dir,SUBMIT_FILE)
    try:
        fd=open(filepath,"w+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        fd.write("Universe = grid\n")
        fd.write("Grid_Resource = %s %s\n"%(gridtype,gatekeeper))
        if rsl!=None:
            fd.write("GlobusRSL = %s\n"%rsl)
        fd.write("Executable = %s\n"%STARTUP_FILE)

        if proxy_id==None:
            web_str=web_base
        else:
            web_str="%s -proxy %s"%(web_base,proxy_id)
        
        fd.write(("Arguments = -v $ENV(GLIDEIN_VERBOSITY) -cluster $(Cluster) -name %s -subcluster $(Process) -schedd %s "%(glidein_name,schedd_name))+
                 ("-dir %s -web %s -sign %s -signtype sha1 -factory %s -consts %s " % (startup_dir,web_base,sha1,factory_name,CONSTS_FILE))+
                 "-param_GLIDEIN_Client $ENV(GLIDEIN_CLIENT) $ENV(GLIDEIN_PARAMS)\n")
        fd.write('+GlideinFactory = "%s"\n'%factory_name)
        fd.write('+GlideinName    = "%s"\n'%glidein_name)
        fd.write('+GlideinClient  = "$ENV(GLIDEIN_CLIENT)"\n')

        
        fd.write("\nTransfer_Executable   = True\n")
        fd.write("transfer_Input_files  =\n")
        fd.write("transfer_Output_files =\n")
        fd.write("WhenToTransferOutput  = ON_EXIT\n")
        fd.write("\nNotification = Never\n")
        fd.write("\n+Owner = undefined\n")
        fd.write("\nLog = job.log\n")
        fd.write("Output = log/job.$(Cluster).$(Process).out\n")
        fd.write("Error = log/job.$(Cluster).$(Process).err\n")
        fd.write("stream_output = False\n")
        fd.write("stream_error  = False\n")
        fd.write("\nQueue $ENV(GLIDEIN_COUNT)\n")
    finally:
        fd.close()
    
############################
# Create a test shell script
def create_test_submit(submit_dir):
    global SUBMIT_FILE,DESCRIPT_FILE
    filepath=os.path.join(submit_dir,"job_test.sh")
    try:
        fd=open(filepath,"w+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        fd.write("#!/bin/bash\n")
        fd.write("export GLIDEIN_CLIENT=test\n")
        fd.write("export GLIDEIN_COUNT=1\n")
        fd.write("export GLIDEIN_VERBOSITY=dbg\n")
        fd.write('export GLIDEIN_PARAMS="-param_GLIDEIN_Collector $HOSTNAME"\n')
        fd.write("condor_submit -name `grep Schedd %s|awk '{print $2}'` %s\n"%(DESCRIPT_FILE,SUBMIT_FILE))
    finally:
        fd.close()
    # Make it executable
    os.chmod(filepath,0755)
    
############################
# Create a submit wrapper 
def create_submit_wrapper(submit_dir):
    global SUBMIT_WRAPPER,SUBMIT_FILE
    filepath=os.path.join(submit_dir,SUBMIT_WRAPPER)
    try:
        fd=open(filepath,"w+")
    except IOError,e:
        raise RuntimeError, "Error creating %s: %s"%(filepath,e)
    try:
        fd.write("#!/bin/bash\n\n")
        fd.write("if [ $# -lt 4 ]; then\n")
        fd.write(' echo "At least 4 args expected!" 1>&2\n echo "Usage: %s schedd client count mode [params]*"\n 1>&2\n'%SUBMIT_WRAPPER)
        fd.write(" exit 1\n")
        fd.write("fi\n")
        fd.write("schedd=$1\nshift\n")
        fd.write("export GLIDEIN_CLIENT=$1\nshift\n")
        fd.write("export GLIDEIN_COUNT=$1\nshift\n")
        fd.write("export GLIDEIN_VERBOSITY=$1\nshift\n")
        fd.write('GLIDEIN_PARAMS=""\nwhile [ $# -ge 2 ]; do\n GLIDEIN_PARAMS="$GLIDEIN_PARAMS -param_$1 $2"\n shift\n shift\ndone\nexport GLIDEIN_PARAMS\n')
        fd.write("condor_submit -name $schedd %s\n"%SUBMIT_FILE)
    finally:
        fd.close()
    # Make it executable
    os.chmod(filepath,0755)
    
############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    params=Params(sys.argv)
    try:
        main(params)
    except RuntimeError, e:
        params.usage()
        print ""
        print e
